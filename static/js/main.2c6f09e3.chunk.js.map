{"version":3,"sources":["components/Input.js","components/LocalStorageInput.js","hooks/useLocalStorage.js","util.js","App.js","serviceWorker.js","index.js"],"names":["label","value","onChange","Form","Group","as","Row","className","Label","column","sm","Col","Control","type","placeholder","localStorageKey","useState","localStorage","getItem","setValue","e","target","setItem","useLocalStorage","slugify","lower","Input","influxdbURL","influx","writePoints","Influx","InfluxDB","err","console","error","width","height","modelConfig","architecture","outputStride","inputResolution","quantBytes","onEstimate","poses","date","length","keypointsObject","pose","keypoints","reduce","acc","part","position","x","y","getKeypointsObject","direction","leftEar","rightEar","getDirection","ear","hip","distance","timestamp","fields","measurement","writeDistance","App","stop","setStop","LocalStorageInput","Button","size","block","onClick","prev","frameRate","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2c6f09e3.chunk.js","sourcesContent":["import React from \"react\"\nimport { Row, Col, Form } from \"react-bootstrap\"\n\nexport default function({ label, value, onChange }) {\n  return (\n    <Form>\n      <Form.Group as={Row} className=\"d-flex\">\n        <Form.Label column sm=\"2\">\n          {label}\n        </Form.Label>\n        <Col sm=\"10\">\n          <Form.Control\n            type=\"text\"\n            placeholder={`Enter ${label}`}\n            value={value}\n            onChange={onChange}\n          />\n        </Col>\n      </Form.Group>\n    </Form>\n  )\n}\n","import React from \"react\"\nimport slugify from \"slugify\"\nimport Input from \"./Input\"\nimport useLocalStorage from \"../hooks/useLocalStorage\"\n\nexport default function({ label }) {\n  const [value, onChange] = useLocalStorage(slugify(label, { lower: true }))\n  return <Input label={label} value={value} onChange={onChange} />\n}\n","import { useState } from \"react\"\n\nexport default function(localStorageKey) {\n  const [value, setValue] = useState(\n    localStorage.getItem(localStorageKey) || \"\"\n  )\n  function onChange(e) {\n    setValue(e.target.value)\n    localStorage.setItem(localStorageKey, e.target.value)\n  }\n  return [value, onChange]\n}\n","import Influx from \"influx\"\n\nconst influxdbURL = localStorage.getItem(\"influxdb-url\")\nlet influx = { writePoints: () => {} }\ntry {\n  influx = new Influx.InfluxDB(influxdbURL)\n} catch (err) {\n  // eslint-disable-next-line no-console\n  console.error(err)\n}\n\n// eslint-disable-next-line import/prefer-default-export\nexport function writeDistance(distance, timestamp) {\n  influx.writePoints([\n    {\n      fields: { distance },\n      measurement: \"forward_head_posture\",\n      timestamp\n    }\n  ])\n}\n","import React, { useState } from \"react\"\nimport PoseNet from \"@react-posenet/time\"\nimport { Button } from \"react-bootstrap\"\nimport LocalStorageInput from \"./components/LocalStorageInput\"\nimport { writeDistance } from \"./util\"\n\nconst width = 600\nconst height = 500\n\nfunction App() {\n  const [stop, setStop] = useState(false)\n  function handleClick() {\n    setStop(prev => !prev)\n  }\n  return (\n    <>\n      <LocalStorageInput label=\"InfluxDB URL\" />\n      <Button size=\"lg\" block onClick={handleClick}>\n        {stop ? \"start\" : \"stop\"}\n      </Button>\n      {stop ? (\n        <div />\n      ) : (\n        <PoseNet\n          className=\"vh-100\"\n          frameRate={1}\n          modelConfig={modelConfig}\n          onEstimate={onEstimate}\n          width={width}\n          height={height}\n        />\n      )}\n    </>\n  )\n}\n\nconst modelConfig = {\n  architecture: \"ResNet50\",\n  outputStride: 16,\n  inputResolution: { width, height },\n  quantBytes: 4\n}\n\nfunction getKeypointsObject(pose) {\n  return pose.keypoints.reduce((acc, { part, position }) => {\n    const { x, y } = position\n    acc[part] = {\n      x: x / width,\n      y: y / height\n    }\n    return acc\n  }, {})\n}\n\nfunction getDirection(keypoints) {\n  const { leftEar, rightEar } = keypoints\n  if (leftEar && rightEar) {\n    return \"front\"\n  }\n  return leftEar ? \"left\" : \"right\"\n}\n\nfunction onEstimate(poses, date) {\n  if (poses.length !== 1) return\n  const [pose] = poses\n  const keypointsObject = getKeypointsObject(pose)\n\n  const direction = getDirection(keypointsObject)\n  if (direction === \"front\") return\n\n  const ear = keypointsObject[`${direction}Ear`]\n  const hip = keypointsObject[`${direction}Hip`]\n  if (!ear || !hip) return\n\n  const distance = direction === \"left\" ? ear.x - hip.x : hip.x - ear.x\n  writeDistance(distance, date)\n}\n\nexport default App\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}